import { resolve } from 'node:path'
import { readFileSync } from 'node:fs'
import { addPlugin, defineNuxtModule } from '@nuxt/kit'
import { defaultColorShema, tailwindFileContent, injectColorsToTailwind, createTypeForAppColors, generateColorChosers } from './theme.templates.ts'
import { createFile } from '../../utils/index.ts'
import type { ThemeGeneratorOptions } from '~/src/module.ts'
import { naiveUiOverrides } from './source/naiveUiOverrides.ts'
import { defineNuxtPlugin } from 'nuxt/app'
import type { NuxtPlugin } from '@nuxt/schema'

export default defineNuxtModule<ThemeGeneratorOptions>({
  meta: {
    name: 'themeGenerator',
    configKey: 'themeGenerator',
  },
  setup(_options, _nuxt) {
    try {
      // addPlugin(defineNuxtPlugin(() => {

      // }))
      // typeof _options.themeCode === 'function' ? _options.themeCode : naiveUiOverrides(_options.themeCode || {})

      const themeDir = _options.location === 'internal' ? 'autogenerated/client/theme' : '../theme'
      const rootDir = resolve(_nuxt.options.buildDir, themeDir).replace(/\\/g, '/')

      createFile(resolve(rootDir, 'theme.colors.ts'), `export default ${JSON.stringify(defaultColorShema)}`)
      injectColorsToTailwind()
      createTypeForAppColors()

      const mixins = (_options.scssMixins![1] === 'apppend' ? readFileSync('./src/runtime/modules/theme_generator/source/mixins.scss', 'utf-8').toString() + '\n\n' : '') + _options.scssMixins![0].map(x => `/*content from <${x}>*/\n${readFileSync(x, 'utf-8').toString()}`).join('\n\n')
      createFile(resolve(rootDir, `theme.mixins.scss`), mixins)

      const css = (_options.themeCss![1] === 'apppend' ? (_options.target === 'naive-ui' ? readFileSync('./src/runtime/modules/theme_generator/source/naiveUi.scss', 'utf-8').toString() : '') + '\n\n' : '') + _options.themeCss![0].map(x => `/*content from <${x}>*/\n${readFileSync(x, 'utf-8').toString()}`).join('\n\n')
      createFile(resolve(rootDir, `theme.styles.scss`), css)

      const content = tailwindFileContent + ['mixins', 'styles'].map(x => `\n@include "${rootDir}/theme.${x}.scss";`).join('')
      createFile(resolve('./src/runtime/tailwindcss/tailwind.css'), content)

      generateColorChosers()

    } catch (error) {
      console.error(error)
    }
  },
})

